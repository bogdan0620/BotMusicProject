from aiogram import Bot, Dispatcher, executor, types
import buttons
import tokens
from states import *
from tokens import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
import database
import csv_file

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def cmd_start(message):
    user_id = message.from_user.id
    checker = database.che—Åk_user(user_id)
    await message.answer_sticker('CAACAgIAAxkBAAIFYmRjeHZS7w1EnHLodGf22k7GXGT3AAKTLQACrFEYS3DrE5B4jXmXLwQ')
    await dp.current_state(user=user_id).update_data(username=message.from_user.full_name)
    if checker:
        all_music = database.get_all_music()
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.main_menu_kb(all_music))
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ üé∂\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=buttons.age_kb())
        await GetAge.getting_age.set()


@dp.callback_query_handler()
async def callback_list(call):
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.message.chat.id
    all_music = database.get_all_music()
    users = {1097387511: {'pr_count': 1}}
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ +
    # print(call.data)
    if call.data == 'next':
        actual_count = users[user_id]['pr_count']
        print(actual_count)

        users[user_id]['pr_count'] += 1
        print(actual_count)

        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=buttons.main_menu_kb(all_music, 'next', users[user_id]['pr_count']))

    # decrement
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ -
    elif call.data == 'back':
        actual_count = users[user_id]['pr_count']
        print(actual_count)

        users[user_id]['pr_count'] -= 0
        print(actual_count)

        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=buttons.main_menu_kb(all_music, 'back', users[user_id]['pr_count']))

    # back
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–Ω–∞–∑–∞–¥'
    # elif call.data == 'back':
    #     # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é
    #     products = database.get_pr_name_id()
    #     # –º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é
    #     await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é',
    #                                 user_id,
    #                                 call.message.message_id,
    #                                 reply_markup=buttons.main_menu_kb(products))

    await bot.answer_callback_query(call.id, f'–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞: {call.data}')
    music = database.get_music_num(call.data)
    if music:
        for i in music:
            result1 = f'{i[1]}'
            result2 = f'{i[0]}. {i[3]} ‚Äì {i[2]}'
        await bot.send_audio(call.from_user.id, audio=result1, caption=result2)

    await bot.answer_callback_query(call.id)


@dp.message_handler(state=GetAge.getting_age, content_types=['text'])
async def age_user(message, state=GetAge.getting_age):
    user_answer = message.text
    users_ages = [str(i) for i in range(10, 81)]

    if user_answer == "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç?":
        await message.answer('–í–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–µ–Ω –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Å–∫–æ—Ä–æ)\n'
                             '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=ReplyKeyboardRemove())

    elif user_answer in users_ages:
        age = message.text
        tg_id = message.from_user.id
        name = message.from_user.full_name
        database.add_user(tg_id, name, age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())
        await state.finish()

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç\n(–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç 10 –¥–æ 80)')


@dp.message_handler(commands=['catalog'])
async def cmd_catalog(message):
    if message.from_user.id in tokens.TG:
        csv_file.get_csv_file()
        await message.answer_document(open('Catalog.csv', 'rb'))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.admin_kb())

    else:
        csv_file.get_csv_file()
        await message.answer_document(open('Catalog.csv', 'rb'))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.admin_kb())


@dp.message_handler(commands=['admin'])
async def cmd_admin(message):
    if message.from_user.id in tokens.TG:
        await message.answer('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üîì\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.admin_kb())
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üîí\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())


@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É üì®')
async def add_music(message):
    if message.from_user.id in tokens.TG:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º—É–∑—ã–∫–∏ üíø', reply_markup=buttons.back_kb())
        await Music_admin.getting_file_music.set()
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üîí\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())


@dp.message_handler(content_types=['audio', 'text'], state=Music_admin.getting_file_music)
async def add_file_music(message, state=Music_admin.getting_file_music):
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.admin_kb())
        await state.finish()
        return
    user_file = message.audio.file_id
    print(user_file)
    await state.update_data(file_id=user_file)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üìù', reply_markup=buttons.back_kb())
    await Music_admin.getting_name_music.set()


@dp.message_handler(content_types=['text'], state=Music_admin.getting_name_music)
async def add_name_music(message, state=Music_admin.getting_name_music):
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º—É–∑—ã–∫–∏ üíø', reply_markup=buttons.back_kb())
        await Music_admin.getting_file_music.set()
        return
    name_file = message.text
    await state.update_data(name=name_file)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è üìù', reply_markup=buttons.back_kb())
    await Music_admin.getting_singer_music.set()


@dp.message_handler(content_types=['text'], state=Music_admin.getting_singer_music)
async def add_singer_music(message, state=Music_admin.getting_singer_music):
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üìù', reply_markup=buttons.back_kb())
        await Music_admin.getting_name_music.set()
        return
    singer_file = message.text
    all_info = await state.get_data()
    tg_file_id = all_info.get('file_id')
    name = all_info.get('name')
    singer = singer_file
    database.add_music(tg_file_id, name, singer)
    await message.answer('–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ‚úÖ')
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è', reply_markup=buttons.admin_kb())


@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def list_users(message):
    if message.from_user.id in tokens.TG:
        csv_file.get_csv_users()
        await message.answer_document(open('users.csv', 'rb'))

    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üîí—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())


@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def list_users_age(message):
    if message.from_user.id in tokens.TG:
        user = database.get_users()
        if user:
            users = ''
            for i in user:
                users += f'{i[0]}. –í–æ–∑—Ä–∞—Å—Ç: {i[3]}\n'
            await message.answer(users, reply_markup=buttons.admin_kb())
        else:
            await message.answer('–ë–∞–∑–∞ –ø—É—Å—Ç–∞ üìÇ', reply_markup=buttons.admin_kb())
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üîí—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())


@dp.message_handler(lambda message: message.text == '–ö–∞–∫ –∏—Å–∫–∞—Ç—å?')
async def how_to_search(message):
    await message.answer('–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Ç–∞–∫–∂–µ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É —Ç—Ä–µ–∫–∞\n'
                         '–£–∑–Ω–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ /catalog', reply_markup=buttons.menu_kb())


@dp.message_handler(content_types=['text'])
async def search_out(message):
    user = database.get_all_music()
    for i in user:
        l = i[0]
    num_music = [str(i) for i in range(1, l)]
    if message.text in num_music:
        m = int(message.text)
        user = database.get_music_num(m)
        if user:
            result1 = '‚§µÔ∏è –í–æ—Ç —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ:\n\n'
            for i in user:
                result1 += f'{i[0]}. –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {i[3]}\n'
                result2 = f'{i[1]}'
            await message.answer_audio(result2)
            await message.answer(result1, reply_markup=buttons.menu_kb())
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üìÇ', reply_markup=buttons.menu_kb())

    else:
        m = message.text
        user = database.get_music_name(m)
        if user:
            result1 = '‚§µÔ∏è –í–æ—Ç —á—Ç–æ –µ—â–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ:\n\n'
            for i in user:
                result1 += f'{i[0]}. –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {i[3]}\n'
                result2 = f'{i[1]}'
            await message.answer_audio(result2)
            await message.answer(result1, reply_markup=buttons.menu_kb())

        else:
            user = database.get_music_singer(m)
            if user:
                result1 = '‚§µÔ∏è –í–æ—Ç —á—Ç–æ –µ—â–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ:\n\n'
                for i in user:
                    result1 += f'{i[0]}. –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {i[3]}\n'
                    result2 = f'{i[1]}'
                await message.answer_audio(result2)
                await message.answer(result1, reply_markup=buttons.menu_kb())

            else:
                await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üìÇ', reply_markup=buttons.menu_kb())


@dp.message_handler()
async def answer_not(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())\


@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=buttons.menu_kb())



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
